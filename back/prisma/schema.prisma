// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  name        String
  email       String        @unique
  confirmkey  String?
  clientId    String?
  client      Client?       @relation(fields: [clientId], references: [id])
  employeeId  String?
  employee    Employee?     @relation(fields: [employeeId], references: [id])
  password    String
  isClient    Boolean       @default(false)
  interaction Interaction[]
  Media       Media?        @relation(fields: [mediaId], references: [id])
  mediaId     String?
  MediaUser   MediaUser[]
}

model Client {
  id             String        @id @default(uuid())
  name           String
  email          String
  phone          String
  address        String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  avatarClientId String?
  avatar         Media?        @relation(fields: [avatarClientId], references: [id])
  project        Project[]
  User           User[]
  MediaClient    MediaClient[]
}

model Employee {
  id               String             @id @default(uuid())
  name             String
  email            String
  phone            String
  address          String
  bio              String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  avatarId         String?
  avatar           Media?             @relation(fields: [avatarId], references: [id])
  departmentId     String?
  department       Department?        @relation(fields: [departmentId], references: [id], name: "department")
  directManegerId  String?
  directManeger    Employee?          @relation(fields: [directManegerId], references: [id], name: "directManeger")
  User             User[]
  task             Task[]
  employeeTest     EmployeeTest[]
  event            Event[]
  teamMembership   TeamMembership[]
  projectManager   Project[]          @relation("projectManager")
  consultant       Project[]          @relation("consultant")
  sender           Behavior[]         @relation("sender")
  receiver         Behavior[]         @relation("receiver")
  headDepartment   Department[]       @relation("headDepartment")
  employee         Employee[]         @relation("directManeger")
  EmployeeQuiz     EmployeeQuiz[]
  EmployeeChatRoom EmployeeChatRoom[]
  Message          Message[]
  MediaEmployee    MediaEmployee[]
  DecisionApply    DecisionApply[]
  Membership       Membership[]
  SenderReq        Request[]          @relation("senderRequest")
  ReceiverReq      Request[]          @relation("receiverRequest")
}

model Project {
  id                  String              @id @default(uuid())
  name                String
  description         String
  duration            String
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  clientId            String?
  client              Client?             @relation(fields: [clientId], references: [id])
  teamId              String?
  team                Team?               @relation(fields: [teamId], references: [id])
  startAt             DateTime?
  endAt               DateTime?
  status              Status              @default(pending)
  projectManagerId    String?
  projectManager      Employee?           @relation(fields: [projectManagerId], references: [id], name: "projectManager")
  consultantId        String?
  consultant          Employee?           @relation(fields: [consultantId], references: [id], name: "consultant")
  contract            Media?              @relation(fields: [contractId], references: [id], name: "contractRelation")
  contractId          String?
  interaction         Interaction[]
  objective           Objective[]
  projectTechnologies ProjectTechnology[]
  MediaProject        MediaProject[]
  cover               Media?              @relation(fields: [coverId], references: [id], name: "coverRelation")
  coverId             String?
  Media               Media?              @relation(fields: [mediaId], references: [id])
  mediaId             String?
}

model Technology {
  id                  String              @id @default(uuid())
  name                String
  description         String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  projectTechnologies ProjectTechnology[]
}

model ProjectTechnology {
  projectId    String
  project      Project    @relation(fields: [projectId], references: [id])
  technologyId String
  technologies Technology @relation(fields: [technologyId], references: [id])

  @@unique(fields: [technologyId, projectId], name: "projectTechnology")
}

model Objective {
  id           String         @id @default(uuid())
  name         String
  decription   String
  projectId    String
  startAt      DateTime?
  endAt        DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  status       Status         @default(pending)
  project      Project        @relation(fields: [projectId], references: [id])
  subobjective SubObjective[]
  Stage        Stage[]
}

model SubObjective {
  id          String    @id @default(uuid())
  name        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  status      Status    @default(pending)
  objectiveId String
  objective   Objective @relation(fields: [objectiveId], references: [id])
}

model Stage {
  id              String    @id @default(uuid())
  name            String
  porcentage      String
  startAt         DateTime?
  endAt           DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  objectiveId     String
  project         Objective @relation(fields: [objectiveId], references: [id])
  status          Status    @default(pending)
  previousStageId String?
  previousStage   Stage?    @relation(name: "previousStage", fields: [previousStageId], references: [id])
  task            Task[]
  Stage           Stage[]   @relation("previousStage")
}

model Task {
  id         String   @id @default(uuid())
  points     Int
  name       String
  duration   String
  level      String
  status     Status   @default(pending)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  stageId    String
  stage      Stage    @relation(fields: [stageId], references: [id])
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])
}

model Team {
  id             String           @id @default(uuid())
  name           String
  project        Project[]
  teamMembership TeamMembership[]
}

model TeamMembership {
  teamId     String
  team       Team     @relation(fields: [teamId], references: [id])
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  @@unique([employeeId, teamId])
}

model Interaction {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  UserId    String
  User      User     @relation(fields: [UserId], references: [id])
}

model Test {
  id           String         @id @default(uuid())
  title        String
  content      String
  correction   String
  score        Int
  employeeTest EmployeeTest[]
}

model EmployeeTest {
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])
  testId     String
  test       Test     @relation(fields: [testId], references: [id])
  score      Int

  @@unique([employeeId, testId])
}

model Quiz {
  id           String         @id @default(uuid())
  content      String
  score        Int
  EmployeeQuiz EmployeeQuiz[]
}

model EmployeeQuiz {
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])
  quizId     String
  quiz       Quiz     @relation(fields: [quizId], references: [id])
  score      Int

  @@unique([employeeId, quizId], name: "employeeQuiz")
}

model Request {
  id           String         @id @default(uuid())
  subject      String
  content      String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  senderId     String
  senderReq    Employee       @relation(fields: [senderId], references: [id], name: "senderRequest")
  receiverId   String
  receiverReq  Employee       @relation(fields: [receiverId], references: [id], name: "receiverRequest")
  MediaRequest MediaRequest[]
}

model Event {
  id          String       @id @default(uuid())
  name        String
  description String
  startAt     DateTime
  endAt       DateTime
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  employeeId  String
  employee    Employee     @relation(fields: [employeeId], references: [id])
  MediaEvent  MediaEvent[]
  Membership  Membership[]
}

model Membership {
  eventId    String
  event      Event    @relation(fields: [eventId], references: [id])
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique(fields: [eventId, employeeId], name: "membership")
}

model Behavior {
  id         String   @id @default(uuid())
  content    String
  senderId   String
  createdAt  DateTime @default(now())
  sender     Employee @relation(fields: [senderId], references: [id], name: "sender")
  receiverId String
  receiver   Employee @relation(fields: [receiverId], references: [id], name: "receiver")
}

model Decision {
  id            String          @id @default(uuid())
  content       String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  DecisionApply DecisionApply[]
}

model DecisionApply {
  decisionId String
  decision   Decision @relation(fields: [decisionId], references: [id])
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique(fields: [decisionId, employeeId], name: "decisionApply")
}

model Product {
  id          String        @id @default(uuid())
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  type        String
  productType ProductType[]
}

model ProductType {
  id          String   @id @default(uuid())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String
  ProductId   String
  Product     Product  @relation(fields: [ProductId], references: [id])
}

model Branches {
  id          String    @id @default(uuid())
  name        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  offices     Offices[]
}

model Department {
  id               String     @id @default(uuid())
  name             String
  description      String
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  headDepartmentId String
  headDepartment   Employee   @relation(fields: [headDepartmentId], references: [id], name: "headDepartment")
  employee         Employee[] @relation("department")
}

model Offices {
  id          String   @id @default(uuid())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  branchesId  String
  branches    Branches @relation(fields: [branchesId], references: [id])
}

model ChatRoom {
  id               String             @id @default(uuid())
  content          String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  employeeChatRoom EmployeeChatRoom[]
  Message          Message[]
}

model Message {
  id         String   @id @default(uuid())
  content    String
  createdAt  DateTime @default(now())
  employeeId String
  chatRoomId String
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  employee   Employee @relation(fields: [employeeId], references: [id])
}

model EmployeeChatRoom {
  id         String   @id @default(uuid())
  employeeId String
  chatRoomId String
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  employee   Employee @relation(fields: [employeeId], references: [id])
}

model Media {
  id             String          @id @default(uuid())
  path           String
  type           String
  alt            String?
  extension      String
  description    String?
  MediaUser      MediaUser[]
  User           User[]
  MediaClient    MediaClient[]
  MediaEmployee  MediaEmployee[]
  avatarEmployee Employee[]
  MediaEvent     MediaEvent[]
  MediaRequest   MediaRequest[]
  MediaProject   MediaProject[]
  Client         Client[]
  cover          Project[]       @relation("coverRelation")
  contract       Project[]       @relation("contractRelation")
  Project        Project[]
}

model MediaUser {
  media   Media  @relation(fields: [mediaId], references: [id])
  mediaId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String

  @@unique(fields: [mediaId, userId], name: "userMedia")
}

model MediaClient {
  media    Media  @relation(fields: [mediaId], references: [id])
  mediaId  String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId String

  @@unique(fields: [mediaId, clientId], name: "clientMedia")
}

model MediaEmployee {
  media      Media    @relation(fields: [mediaId], references: [id])
  mediaId    String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId String

  @@unique(fields: [mediaId, employeeId], name: "userMedia")
}

model MediaEvent {
  media   Media  @relation(fields: [mediaId], references: [id])
  mediaId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String

  @@unique(fields: [mediaId, eventId], name: "eventMedia")
}

model MediaRequest {
  media     Media   @relation(fields: [mediaId], references: [id])
  mediaId   String
  request   Request @relation(fields: [requestId], references: [id], onDelete: Cascade)
  requestId String

  @@unique(fields: [mediaId, requestId], name: "requestMedia")
}

model MediaProject {
  media     Media   @relation(fields: [mediaId], references: [id])
  mediaId   String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  @@unique(fields: [mediaId, projectId], name: "projectMedia")
}

model MainComponent {
  id           String            @id @default(uuid())
  title        String            @unique
  path         String?           @unique
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  type         TypeMainComponent
  SubComponent SubComponent[]
}

model SubComponent {
  id                  String                @id @default(uuid())
  name                String?
  main                MainComponent         @relation(fields: [mainId], references: [id])
  mainId              String
  position            PositionSubComponent
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  ContentSubComponent ContentSubComponent[]
}

model ContentSubComponent {
  id             String       @id @default(uuid())
  title          String
  navigateTo     String?
  content        String
  type           ContentType  @default(button)
  subContent     Json?
  subComponent   SubComponent @relation(fields: [subComponentId], references: [id])
  subComponentId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

// join table

enum Status {
  pending
  in_progress
  completed
  on_hold
  cancelled
  reviewed
  refused
  accepted
}

enum TypeMainComponent {
  footer
  header
  sidebar
  page
}

enum PositionSubComponent {
  left
  right
  top
  bottom
  middle
  section
}

enum ContentType {
  button
  paragraph
  image
  select
  
}
